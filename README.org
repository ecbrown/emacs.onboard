* ðŸš€ ONBOARD â€“ Build your own vanilla Emacs

*Portable Emacs config without any 3rd-party packages*

Overwhelmed by the complexity of (excellent) Emacs starter distributions like Doom-Emacs or Spacemacs?
You want to build your Emacs config bottom-up but not forget easy-to-miss basics?

The goal of this Emacs starter kit is to offer a beginner-friendly, clean slate to build upon. It stays as close as possible to vanilla Emacs, but offers some convenience and a better look, without relying on other packages. It's all built-in â€“ all ONBOARD.


** Why, oh why? Yet another Emacs starter kit?

Legit question. Well, better 69 roads to Emacs than 3-5, no? When I was setting up a VM to test some stuff, I wished I had a one-file-config that I can simply drop in, and have a sane environment in no time. An then, when I was cleaning up my Emacs config again, I realized that I haven't touched some parts within the last months or so. They just worked well.

So I stripped out those parts and put it all in one file, and made them my core config. Then added some grooming to make everything digestable for the public, and -- here we are.

Actually I use not just that config but have my Emacs config modularized into several -- e. g. an extension layer where 3rd-party packages are configured, configs for programming languages, etc. But this is the heart piece.


** Getting started (Linux)

*** New Emacs user without own config files?

1. Download [[https://raw.githubusercontent.com/monkeyjunglejuice/emacs-onboard/main/init-onboard.el][init-onboard.el]]
2. Rename it to =.emacs=
3. Move it to your home directory and start Emacs
or
1. Download [[https://raw.githubusercontent.com/monkeyjunglejuice/emacs-onboard/main/init-onboard.el][init-onboard.el]]
2. Rename it to =init.el=
3. Move it to =~/.emacs.d= directory and start Emacs


*** Emacs user with existing .emacs or ~/.emacs.d/init.el file?

1. Download [[https://raw.githubusercontent.com/monkeyjunglejuice/emacs-onboard/main/init-onboard.el][init-onboard.el]]
2. Open a terminal to try it out
3. Run the shell command: ~emacs -Q --load ~/path/to/init-onboard.el~
or
1. Download [[https://raw.githubusercontent.com/monkeyjunglejuice/emacs-onboard/main/init-onboard.el][init-onboard.el]]
2. Put this in your Emacs init file: ~(require 'init-onboard "~/path/to/init-onboard.el")~
3. Start Emacs (this way may interfere with your current config)


** Getting started (Windows)
- /Coming soon!/


** Tested with:

- [X] Emacs 27.1 on Ubuntu 20.04 LTS
- [X] Emacs 26.1 on Debian 10.9.0
- [ ] Emacs 27 on Windows 10
- [ ] Emacs 26 Windows 10
- [ ] Emacs 27 on MacOS
- [ ] Emacs 26 on MacOS


** Getting comfortable

If you are an Emacs beginner, you will find the most tips and answers in the file itself.

The seemingly weird keybindings are not what make Emacs. They are in fact secondary. All those keybindings are just convenience shortcuts to use commands, but they are not the commands themselves. The /commands/ are the really interesting things.

What that means:


*** There are just 2 keybindings that are really important:

"M-x" â€” Execute a command. Press <Alt>â€“<x> to reach all available commands.

Examples:

- "M-x list-packages" Install 3rd-party packages (the "Emacs app store" or "Emacs marketplace" cough-cough)

- "M-x check-parens" Check if all parens match (in Emacs Lisp code file)

- "M-x help" to reach the ultimate help menu


*** And the other important keybinding is this:

"C-g" â€” Get out! Press <Ctrl>â€“<g> to cancel whatever happens (or hitting 3x <ESC> in utter panic, which has the same effect)


** Goals

- Portable: Should work on recent Linux/Unix, Windows and MacOS systems; Emacs versions >= 26

- Beginner-friendly: Novice Emacs users willing to look into Elisp code should be able to follow

- Don't be invasive: Provide an Emacs config as a library; don't try to be a replacement, but an addition

- Only built-in packages/features coming with the GNU Emacs distribution's default build options

- Documentation: Comments are first class; It should be clear why something is in the code

- Modular simplicity: Code should not be intertwined, but easily modificable and separately usable

- One single file only


** Non-Goals

- Provide a whole new experience like Spacemacs or Doom-Emacs do

- Pre-configure everything and the cat's pillow (if you know cats, â€¦)

- New keybindings. However, they may be useful sometimes.

- (Re)creating functionality that would better fit into a 3rd-party package


** Contribution

You are welcome to contribute! Right now, I think testing on various OS is the most important thing to do, to detect and iron out potential issues users of other operating systems may have.
